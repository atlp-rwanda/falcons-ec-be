{"version":3,"file":"index.js","names":["_chai","_interopRequireDefault","require","_chaiHttp","_server","_index","_bcrypt","expect","chai","should","use","chaiHttp","describe","before","_asyncToGenerator2","_regenerator","mark","_callee","wrap","_callee$","_context","prev","next","db","sequelize","sync","force","stop","it","_callee2","res","_callee2$","_context2","request","app","get","sent","to","have","status","body","message","equal","_callee3","_callee3$","_context3","be","an","length","greaterThan","_callee4","_callee4$","_context4","User","destroy","where","_callee5","_callee5$","_context5","post","send","email","password"],"sources":["../../src/tests/index.js"],"sourcesContent":["import chai from \"chai\";\r\nimport chaiHttp from \"chai-http\";\r\nimport app from \"../server.js\";\r\nimport db from \"../database/models/index\";\r\nimport bcrypt from \"bcrypt\";\r\n\r\nconst expect = chai.expect;\r\nchai.should();\r\n\r\nchai.use(chaiHttp);\r\n\r\ndescribe(\"Welcome Controller\", () => {\r\n  before(async () => {\r\n    // run migrations and seeders to prepare the database\r\n    await db.sequelize.sync({ force: true });\r\n  });\r\n\r\n  describe(\"GET /welcome\", () => {\r\n    it(\"should return a 200 response and a welcome message\", async () => {\r\n      const res = await chai.request(app).get(\"/welcome\");\r\n      expect(res).to.have.status(200);\r\n      expect(res.body.message).to.equal(\"Test controller OK\");\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"Dummy Routes\", () => {\r\n  describe(\"GET /\", () => {\r\n    it(\"should return an array of all users\", async () => {\r\n      const res = await chai.request(app).get(\"/\");\r\n\r\n      expect(res).to.have.status(404);\r\n      expect(res.body).to.be.an(\"array\");\r\n      expect(res.body.length).to.be.greaterThan(0);\r\n    });\r\n        it(\"should return an error message if no users are found\", async () => {\r\n      await db.User.destroy({ where: {} });\r\n\r\n      const res = await chai.request(app).get(\"/\");\r\n\r\n      expect(res).to.have.status(404);\r\n      expect(res.body.message).to.equal(\"No users found\");\r\n    });\r\n    });\r\n  describe(\"POST /\", () => {\r\n    it(\"should create a new user\", async () => {\r\n      const res = await chai.request(app)\r\n        .post(\"/\")\r\n        .send({ email: \"test@example.com\", password: \"password\" });\r\n\r\n      expect(res).to.have.status(404);\r\n      expect(res.body.message).to.equal(\"User created\"); \r\n     });\r\n    });   \r\n  });"],"mappings":"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"}